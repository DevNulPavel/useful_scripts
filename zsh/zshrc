########################################################################
# Install before:
# sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
# curl -L git.io/antigen > .antigen.zsh

# Plugins list:
# https://github.com/unixorn/awesome-zsh-plugins
########################################################################

# Antigen plugins
source ~/.antigen.zsh

# Load the oh-my-zsh's library.
antigen use oh-my-zsh

# Plugins
antigen bundle git
antigen bundle cargo
antigen bundle brew
antigen bundle branch
antigen bundle xcode
antigen bundle vscode
antigen bundle tmux 
antigen bundle rustup 
antigen bundle rust 
antigen bundle rsync
antigen bundle node 
antigen bundle npm 
antigen bundle colorize
antigen bundle adb
antigen bundle sublime
antigen bundle sudo
antigen bundle transfer
antigen bundle gradle
antigen bundle python
antigen bundle pod
antigen bundle autojump
antigen bundle zpm-zsh/clipboard
antigen bundle zsh-users/zsh-autosuggestions
antigen bundle zsh-users/zsh-syntax-highlighting
antigen bundle zsh-users/zsh-completions
antigen bundle zsh-users/zsh-history-substring-search

# Theme
# antigen theme af-magic
# antigen theme bira
# antigen theme blinks
# antigen theme ys
# antigen theme avit
# antigen theme amuse
# antigen theme dallas
# antigen theme gnzh
# antigen theme caiogondim/bullet-train.zsh
# antigen theme https://github.com/caiogondim/bullet-train-oh-my-zsh-theme bullet-train

# Apply app settings
antigen apply

########################################################################

# FZF Search
# либо можно подключить с помощью плагина для antigen: antigen bundle fzf
# [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Skim search (ZFZ analogue)
# Файлы нужно скачать из https://github.com/lotabout/skim/tree/master/shell
[ -f ~/.skim/key-bindings.zsh ] && source ~/.skim/key-bindings.zsh
[ -f ~/.skim/completion.zsh ] && source ~/.skim/completion.zsh

# Утилита fuck
eval $(thefuck --alias)

########################################################################

# $(git_prompt_info)
# ZSH_THEME_GIT_PROMPT_PREFIX="(git: "
# ZSH_THEME_GIT_PROMPT_SUFFIX=")$reset_color"
# ZSH_THEME_GIT_PROMPT_DIRTY="$terminfo[bold]$fg[red]"
# ZSH_THEME_GIT_PROMPT_CLEAN="$terminfo[bold]$fg[green]"
# function local_git_info() {
#     echo "$(parse_git_dirty)$(git_prompt_info)"
# }
# $(local_git_info)

# Terminal prompt
# https://jonasjacek.github.io/colors/
# %D 
# %*
# %@
# %m
# %n
# %~
# %? 
# %{$fg[white]%}[%*]%{$reset_color%}
# %(!.#.$)
#%{$fg[magenta]%}# -------------------------------------------%{$reset_color%} 
# %{$fg[white]%}[%*]%{$reset_color%}
# %{$fg[blue]%}---------------------%{$reset_color%}
# %{$fg[cyan]%}(%n@%m)%{$reset_color%} 
PROMPT="%{$fg[magenta]%}#############################################%{$reset_color%} 
%{$fg[magenta]%}#%{$reset_color%} \
%{$fg[cyan]%}%n@%m%{$reset_color%}: \
%{$terminfo[bold]$fg[yellow]%}%~%{$reset_color%} 
%{$terminfo[bold]$fg[red]%}%(!.#.$)%{$reset_color%} "

########################################################################

# VSCode
# export PATH="/Applications/Visual Studio Code.app/Contents/Resources/app/bin":$PATH

# Default editor
export EDITOR=subl

# Homebrew + User bin
export PATH=$HOME/bin:/usr/local/bin:$PATH

# Rust
export PATH=$HOME/.cargo/bin:$PATH
export RUSTC_WRAPPER=/usr/local/bin/sccache
export SCCACHE_DIR=$HOME/sccache
export SCCACHE_CACHE_SIZE=2G

# Go
export GOPATH=$HOME/go
export PATH=$HOME/go/bin:$PATH

# Android
#export ANDROID_SDK $HOME/AndroidSDK
export ANDROID_SDK=$HOME/android_sdk_studio
export ANDROID_SDK_ROOT=$ANDROID_SDK
export ANDROID_HOME=$ANDROID_SDK
export ANDROID_NDK=$HOME/android_ndk_21
#export ANDROID_NDK=/usr/local/opt/AndroidNDK_21
#export ANDROID_NDK=$HOME/android_sdk_studio/ndk-bundle
export ANDROID_NDK_ROOT=$ANDROID_NDK
export ANDROID_NDK_HOME=$ANDROID_NDK
export NDK_ROOT=$ANDROID_NDK
export NDK_HOME=$ANDROID_NDK
export PATH=$ANDROID_SDK/tools:$ANDROID_SDK/platform-tools:$ANDROID_SDK:$ANDROID_NDK:$PATH

# Brew C include paths
# export C_INCLUDE_PATH=$C_INCLUDE_PATH /usr/local/include
# export C_INCLUDE_PATH=$C_INCLUDE_PATH /usr/local/opt

# Brew  C++ include paths
# export CPLUS_INCLUDE_PATH $C_INCLUDE_PATH

# Brew libs path
export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH

# Vulkan
export VULKAN_SDK=$HOME/vulkan_sdk/macOS
export PATH=$VULKAN_SDK/bin:$PATH

# PVR
# export PATH $PATH '/Applications/Imagination/PowerVR_Graphics/PowerVR_Tools/PVRTexTool/CLI/OSX_x86/'

####################################
# Переменные с использованием emsdk (legacy) (Вроде как стабильная версия: ./emsdk install 1.38.48-fastcomp && ./emsdk activate 1.38.48-fastcomp)
####################################
# export EMSDK_PATH="$HOME/projects/emsdk"
# export LLVM_ROOT="$HOME/projects/emsdk/fastcomp/fastcomp/bin"
# export BINARYEN_ROOT="$HOME/projects/emsdk/fastcomp"
# export EMSCRIPTEN_ROOT="$HOME/projects/emsdk/fastcomp/emscripten"
# export EMSCRIPTEN_NATIVE_OPTIMIZER="$HOME/projects/emsdk/fastcomp/bin/optimizer"
# export NODE_JS="$HOME/projects/emsdk/node/8.9.1_64bit/bin/node"
# export EMSCRIPTEN_PATH="$HOME/projects/emsdk/fastcomp/emscripten"
# export FASTCOMP_PATH="$HOME/projects/emsdk/fastcomp"
# export PVRCLI_PATH="/Applications/Imagination/PowerVR_Graphics/PowerVR_Tools/PVRTexTool/CLI/OSX_x86"
# export PATH=$EMSCRIPTEN_PATH:$EMSCRIPTEN_PATH/tools:$PVRCLI_PATH:$EMSDK_PATH/node/12.9.1_64bit/bin:$PATH
# export LLVM=$FASTCOMP_PATH
# export EMSCRIPTEN=$EMSCRIPTEN_PATH
# export EMSDK=$EMSDK_PATH

####################################
# Переменные с использованием emsdk (latest LLVM, раньше назывался upstream) (Вроде как стабильная версия: ./emsdk install 1.38.48-upstream && ./emsdk activate 1.38.48-upstream)
####################################
# export EMSDK_PATH="$HOME/projects/emsdk"
# export LLVM_ROOT="$HOME/projects/emsdk/upstream/bin"
# export BINARYEN_ROOT="$HOME/projects/emsdk/upstream"
# export EMSCRIPTEN_ROOT="$HOME/projects/emsdk/upstream/emscripten"
# export EMSCRIPTEN_PATH="$HOME/projects/emsdk/upstream/emscripten"
# export NODE_JS="$HOME/projects/emsdk/node/8.9.1_64bit/bin/node"
# export PVRCLI_PATH="/Applications/Imagination/PowerVR_Graphics/PowerVR_Tools/PVRTexTool/CLI/OSX_x86"
# export PATH=$EMSCRIPTEN_PATH:$EMSCRIPTEN_PATH/tools:$PVRCLI_PATH:$EMSDK_PATH/node/8.9.1_64bit/bin:$PATH
# export EMSCRIPTEN=$EMSCRIPTEN_PATH
# export EMSDK=$EMSDK_PATH

####################################
# Переменные с использованием emsdk (latest LLVM, раньше назывался upstream) (Вроде как стабильная версия: ./emsdk install 1.39.6 && ./emsdk activate 1.39.6)
####################################
export EMSDK_PATH="$HOME/projects/emsdk"
export LLVM="$HOME/projects/emsdk/upstream/bin"
export LLVM_ROOT="$HOME/projects/emsdk/upstream/bin"
export BINARYEN="$HOME/projects/emsdk/upstream"
export BINARYEN_ROOT="$HOME/projects/emsdk/upstream"
export EMSCRIPTEN_ROOT="$HOME/projects/emsdk/upstream/emscripten"
export EMSCRIPTEN_PATH="$HOME/projects/emsdk/upstream/emscripten"
export NODE_JS="$HOME/projects/emsdk/node/8.9.1_64bit/bin/node"
export PVRCLI_PATH="/Applications/Imagination/PowerVR_Graphics/PowerVR_Tools/PVRTexTool/CLI/OSX_x86"
export PATH=$EMSCRIPTEN_PATH:$EMSCRIPTEN_PATH/tools:$PVRCLI_PATH:$EMSDK_PATH/node/8.9.1_64bit/bin:$PATH
export EMSCRIPTEN=$EMSCRIPTEN_PATH
export EMSDK=$EMSDK_PATH

# Convert tools pathes test
# export PVR_TOOL_PATH '/Applications/Imagination/PowerVR_Graphics/PowerVR_Tools/PVRTexTool/CLI/OSX_x86/PVRTexToolCLI'
# export FFMPEG_TOOL_PATH '/usr/local/bin/ffmpeg'
# export WEBP_TOOL_PATH '/usr/local/bin/cwebp'

# XGEN
export XGEN_ENABLE_DISTCC=false
export XGEN_ENABLE_CCACHE=true
export XGEN_XCODE_DEVELOPER_DIR="/Applications/Xcode.app/Contents/Developer"
